import Head from "next/head";
import Image from "next/image";
import React, { Fragment, useEffect, useRef, useState } from "react";
import Container from "../components/Content/Container";
import Header from "../components/navbar/Header";
import ContentArticle from "../components/section/ContentFirst/ContentArticle";
import ContentImg from "../components/section/ContentFirst/ContentImg";
import ContentCard from "../components/section/ContentSecond/ContentCard";
import ModalCard from "../components/section/ContentSecond/ModalCard";
import SearchCards from "../components/section/ContentSecond/SearchCards";
import ImgShow from "../components/slideImg/ImgShow";
import SwapIcon from "../components/slideImg/SwapIcon";
import Paragraf from "../components/text/Paragraf";
import useScrollTop from "../hooks/useScrollTop";
import ArrowLeft from "../icon/ArrowLeft";
import ArrowRight from "../icon/ArrowRight";

export const StateContext = React.createContext();
export const ThemeContext = React.createContext();
export const ThemeCards = React.createContext();
export const DataContext = React.createContext();

export default function Home() {
  const [searchPokemon, setSearchPokemon] = useState("");
  const [isOpen, setIsOpen] = useState(false);
  const [dataPokemon, setDataPokemon] = useState({});
  const [color, setColor] = useState("");
  const [numberOfdot, setNumberOfdot] = useState(0);
  const numberSectionOne = useRef();
  const { top } = useScrollTop();

  useEffect(() => {
    const value = numberSectionOne.current.offsetTop;
    if (top >= value) {
      setNumberOfdot(2);
    } else {
      setNumberOfdot(1);
    }
  }, [setNumberOfdot, top]);

  return (
    <Fragment>
      <ThemeCards.Provider value={{ isOpen: isOpen, setIsOpen: setIsOpen }}>
        <DataContext.Provider
          value={{ dataPokemon: dataPokemon, color: color }}
        >
          {isOpen && <ModalCard />}
        </DataContext.Provider>
      </ThemeCards.Provider>

      <div
        className="relative before:w-full before:h-full 
      before:bg-gray-100 before:absolute before:-z-50"
      >
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div
          className="bg-green-500/80 w-[55%] h-screen absolute top-0 
          right-0 before:-z-20"
          style={{
            clipPath: "polygon(20% 0%, 100% 0, 100% 100%, 0% 100%)",
            WebkitClipPath: "polygon(20% 0%, 100% 0, 100% 100%, 0% 100%)",
          }}
        >
          <div
            className="absolute bottom-4 lg:bottom-0
            flex justify-between items-center w-full px-10"
          >
            <div
              className="w-[120px] h-[50px] sm:w-40 sm:h-[55px] lg:w-52 
              lg:h-24 xl:w-64 xl:h-28 overflow-hidden hidden md:block"
            >
              <Image
                src="/img/dotGrid2.png"
                width="100%"
                height="100%"
                layout="responsive"
                priority
                alt="dot grid"
              />
            </div>
            <SwapIcon className="flex justify-center items-center" />
          </div>
        </div>

        <div
          className="z-50 fixed flex justify-center gap-4 h-fit
          items-center bottom-0 top-0 my-auto mx-0 right-12 flex-col"
        >
          {[1, 2, 3].map((data) => (
            <div
              className={`w-3 h-3 rounded-full cursor-pointer transition 
              duration-200 ease-in-out ${
                numberOfdot === data ? "bg-white" : "bg-black"
              }`}
              key={data}
            ></div>
          ))}
        </div>

        <header className="py-10">
          <Header />
        </header>

        <section>
          <Container className="px-5 sm:px-0 relative z-20">
            <div
              className="block lg:grid lg:grid-cols-2 items-center 
              relative mt-5 md:mt-12 lg:mt-24 xl:mt-40"
            >
              <ContentArticle className="space-y-5 w-full" />
              <ContentImg
                className="w-1/2 absolute right-0 top-1/2 mt-20 
                -translate-y-1/2 hidden lg:block"
              />
            </div>

            <div className="flex w-full lg:w-5/12 gap-8 mt-20">
              <ImgShow source="1.png" className="w-1/2" />
              <ImgShow source="3.png" className="w-1/2" />
            </div>

            <div
              className="flex items-center mt-5 justify-center 
              lg:justify-start"
            >
              <div className="w-5/12 flex justify-center gap-4">
                <ArrowLeft className="h-6 w-6" />
                <p className="text-xl font-semibold">1 of 3</p>
                <ArrowRight className="h-6 w-6" />
              </div>
            </div>
          </Container>
        </section>

        <section ref={numberSectionOne} className="bg-slate-700/20 mt-72">
          <Container className="px-5 sm:px-0 py-10">
            <StateContext.Provider
              value={{
                searchPokemon: searchPokemon,
                setSearchPokemon: setSearchPokemon,
              }}
            >
              <div className="text-center space-y-4">
                <h2 className="text-5xl font-normal tracking-tight text-black/80">
                  PokeDex
                </h2>
                <Paragraf className="text-black/50">
                  Is your pokemon on our codex?
                </Paragraf>
                <SearchCards className="mx-auto" />
              </div>

              <ThemeContext.Provider
                value={{
                  setIsOpen: setIsOpen,
                }}
              >
                <DataContext.Provider
                  value={{ setDataPokemon: setDataPokemon, setColor: setColor }}
                >
                  <ContentCard />
                </DataContext.Provider>
              </ThemeContext.Provider>
            </StateContext.Provider>
          </Container>
        </section>
      </div>
    </Fragment>
  );
}
